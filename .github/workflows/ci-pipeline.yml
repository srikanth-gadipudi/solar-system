name: node js ci pipeline
on:
  push:
    branches: 
        - main
        - 'feature/*'
  pull_request:
    branches:
        - main

  workflow_dispatch:
    inputs:
        logLevel:
            description: 'Log level'
            required: true
            default: 'warning'
            type: choice
            options:
            - info
            - warning
            - debug
        tags:
            description: 'Test scenario tags'
            required: false
            type: boolean
env:
    MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:

    build:
        strategy:
          matrix:
            node: [18,20]
            os : [ubuntu-latest]  
          
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js version 18
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node }}

            - name: Cache node modules
              id: cache-npm
              uses: actions/cache@v3
              env:
                cache-name: cache-node-modules
              with:
                # npm cache files are stored in `~/.npm` on Linux/macOS
                path: node_modules
                key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
            
            - name: npm install and build
              run: npm install
            - name: run npm test
              id: generate-test-result
              run: npm run test

            - name: archive test artifact 
              uses: actions/upload-artifact@v3
              if: always()
          
              with:
                path: test-results.xml
                name: test-result-artifact-${{ matrix.node}}-${{matrix.os}}
                retention-days: 5

    code-coverage:
        runs-on: ${{matrix.os}}
        strategy:
          matrix:
            node: [18,20]
            os : [ubuntu-latest]  
        needs: [build]
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js version 18
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node }}
            - name: Cache node modules
              id: cache-npm
              uses: actions/cache@v3
              env:
                cache-name: cache-node-modules
              with:
                # npm cache files are stored in `~/.npm` on Linux/macOS
                path: node_modules
                key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
              
            - name: npm install and build
              run: npm install

            - name: run npm coverage
              run: npm run coverage
            
            - name : archive coverage artifact 
              uses: actions/upload-artifact@v4
              if: always()
              with:
                name: coverage-artifact-${{ matrix.node}}-${{matrix.os}}
                path: coverage
                retention-days: 5
      
    Build-docker-image:
      runs-on: ubuntu-latest
      needs: [build,code-coverage]
      permissions:
        contents: read
        packages: write

      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        
        - name: login to docker hub 
          uses: docker/login-action@v2
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ vars.DOCKERHUB_TOKEN }}

        - name: login to GHCR
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner}}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build docker image
          uses: docker/build-push-action@v6
          with:
            push: false
            context: .
            tags: |
              ${{ vars.DOCKER_USERNAME}}/solar-system:latest
              ${{ vars.DOCKER_USERNAME}}/solar-system:${{github.run_number}}
              ghcr.io/${{ github.repository_owner}}/solar-system:latest
              ghcr.io/${{ github.repository_owner}}/solar-system:${{github.run_number}}


        - name: run docker image and test 
          run: |
              docker run -d --name=solar-system -p 3000:3000 \
              -e MONGO_URI=${{env.MONGO_URI}} \
              -e MONGO_USERNAME=${{env.MONGO_USERNAME}} \
              -e MONGO_PASSWORD=${{env.MONGO_PASSWORD}} \ 
              solar-system:${{github.run_number}}

              export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system)
              echo $IP
              echo checking container healthcheck using wget
              wget -q -O - http://$IP:3000/live |grep live 


        - name: Build and push
          uses: docker/build-push-action@v6
          with:
            push: true
            context: .
            tags: |
              ${{ vars.DOCKER_USERNAME}}/solar-system:latest
              ${{ vars.DOCKER_USERNAME}}/solar-system:${{github.run_number}}
              ghcr.io/${{ github.repository_owner}}/solar-system:latest
              ghcr.io/${{ github.repository_owner}}/solar-system:${{github.run_number}}

        - name: cleanup all the docker images
          run: docker rmi -f solar-system:${{github.run_number}} ${{ vars.DOCKER_USERNAME}}/solar-system:${{github.run_number}}

      



            


